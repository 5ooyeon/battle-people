pipeline {
    agent any
    environment {
        HOST_JENKINS_HOME = "/home/ubuntu/jenkins_home"
        DOCKER_JENKINS_HOME = "/var/jenkins_home"
        DOCKER_IMAGE = "node:18"
        GIT_REPO_URL = "${env.gitlabSourceRepoHttpUrl ?: 'https://lab.ssafy.com/s11-webmobile1-sub2/S11P12A706.git'}"
        GIT_BRANCH = getGitBranch()
        WORK_DIR = "client"
        MATTERMOST_WEBHOOK_CREDENTIAL_ID = "mattermost-webhook"
    }
    post {
        failure {
            updateGitlabCommitStatus name: 'pipeline', state: 'failed'
        }
        success {
            updateGitlabCommitStatus name: 'pipeline', state: 'success'
            script {
                def branchName = GIT_BRANCH.replaceAll('/', '_') // 슬래시를 언더스코어로 치환
                def artifactFolder = "artifact-${branchName}"
                def targetDir = "${env.DOCKER_JENKINS_HOME}/artifacts/${env.JOB_NAME}/${branchName}"
                
                // 폴더 생성 및 아티팩트 복사
                sh "mkdir -p ${targetDir}"
                sh "cp -r client/dist/* ${targetDir}/"
                
                // 아티팩트 아카이브
                archiveArtifacts artifacts: "client/dist/**", allowEmptyArchive: true
            }
        }
        aborted {
            updateGitlabCommitStatus name: 'pipeline', state: 'skipped'
        }
    }
    options {
        gitLabConnection('BattlePeople')
        gitlabBuilds(builds: ['pipeline', 'lint', 'test', 'build'])
    }
    triggers {
        gitlab(
            triggerOnPush: true, 
            triggerOnMergeRequest: true, 
            branchFilterType: 'RegexBasedFilter', 
            targetBranchRegex: '(main|develop)/client', 
            secretToken: '5ace89c4c7cd1eba1681627364d7526f',
            triggerOnAcceptedMergeRequest: true,
            triggerOpenMergeRequestOnPush: "source",
        )
    }
    stages {
        stage('Pending') {
            steps {
                script {
                    if (env.gitlabMergeRequestState in ['closed']) {
                        currentBuild.result = 'ABORTED'
                        error("Merge Request is in state '${env.gitlabMergeRequestState}'. Aborting pipeline.")
                    }
                    env.HOST_WORKSPACE = env.WORKSPACE.replace(env.DOCKER_JENKINS_HOME, env.HOST_JENKINS_HOME)
                    echo "New WORKSPACE path: ${env.HOST_WORKSPACE}"
                    updateGitlabCommitStatus name: 'pipeline', state: 'pending'
                }
            }
        }
        stage('checkout') {
            steps {
                checkoutCode()
            }
        }
        stage('install') {
            steps {
                sh '''
                rm client/package-lock.json
                '''
                runDockerCommand("npm install")
            }
        }
        stage('lint') {
            steps {
                executeStage('lint', 'npm run lint')
            }
        }
        stage('test') {
            steps {
                executeStage('test', 'npm run test')
            }
        }
        stage('build') {
            steps {
                executeStage('build', 'npm run build')
            }
        }
        stage('Report Status to GitLab') {
            steps {
                script {
                    def status = currentBuild.currentResult == 'SUCCESS' ? 'success': 'failed'
                    updateGitlabCommitStatus name: 'pipeline', state: status
                }
            }
        }
    }
}
def getGitBranch() {
    def sourceBranch = env.gitlabSourceBranch ?: 'develop/client'
    def targetBranch = env.gitlabTargetBranch ?: 'develop/client'
    return env.gitlabMergeRequestState == 'merged' ? targetBranch : sourceBranch
}
def checkoutCode() {
    checkout changelog: false, poll: false, scm: [
        $class: 'GitSCM',
        branches: [[name: "${GIT_BRANCH}"]],
        extensions: [],
        userRemoteConfigs: [[credentialsId: 'personal_token', url: "${GIT_REPO_URL}"]]
    ]
}
def executeStage(stageName, command) {
    script {
        try {
            updateGitlabCommitStatus name: stageName, state: 'running'
            runDockerCommand(command)
            updateGitlabCommitStatus name: stageName, state: 'success'
        } catch (Exception e) {
            updateGitlabCommitStatus name: stageName, state: 'failed'
            def mergeRequestUrl = env.gitlabMergeRequestUrl ?: 'N/A'
            def errorMessage = """
                Stage ${stageName} failed with error: ${e.message}
                Build URL: ${env.BUILD_URL}
                Job Name: ${env.JOB_NAME}
                Build Number: ${env.BUILD_NUMBER}
                Branch: ${GIT_BRANCH}
                Merge Request URL: ${mergeRequestUrl}
            """
            sendMattermostNotification(errorMessage)
            throw e
        }
    }
}
def runDockerCommand(command) {
    sh """
        docker run --rm -v ${env.HOST_WORKSPACE}:/workspace -w /workspace/${env.WORK_DIR} ${env.DOCKER_IMAGE} ${command}
    """
}
def sendMattermostNotification(message) {
    withCredentials([string(credentialsId: env.MATTERMOST_WEBHOOK_CREDENTIAL_ID, variable: 'WEBHOOK_URL')]) {
        sh """
        curl -X POST -H 'Content-Type: application/json' -d '{
            "text": "${message.replaceAll('"', '\\"')}"
        }' ${WEBHOOK_URL}
        """
    }
}